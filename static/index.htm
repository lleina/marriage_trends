<html>

<head>
    <!---Imports d3--->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        .gridlines line {
            stroke: #bbb;
        }

        .gridlines .domain {
            stroke: none;
        }

        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 2;
        }

        .dot {
            fill: steelblue;
            /* Fills the circles with the same color as the line */
            stroke: steelblue;
            stroke-width: 2;
        }
    </style>
</head>

<body>
    <svg id="linesvg" height="500" width="800" style="border:1px solid rgb(0, 0, 0)"></svg>

    <script>
        const linesvg = d3.select("svg#linesvg");
        const width = linesvg.attr("width");
        const height = linesvg.attr("height");
        const margins = { top: 20, right: 20, bottom: 50, left: 50 };
        const lineWidth = width - margins.left - margins.right;
        const lineHeight = height - margins.top - margins.bottom;

        const requestData = async function () {

            d3.csv('./both_sexes.csv', d3.autoType)
                .then((data) => {
                    const yearExtent = d3.extent(data, d => d['year']);
                    const yearScale = d3.scaleLinear().domain(yearExtent).range([0, lineWidth])

                    const marriageExtent = d3.extent(data, d => (1 - d['all_2534']));
                    const marriageScale = d3.scaleLinear().domain([marriageExtent[0] - 0.05, marriageExtent[1] + 0.1]).range([lineHeight, 0])

                    // Draw gridlines first
                    let leftGridlines = d3.axisLeft(marriageScale)
                        .tickSize(-lineWidth - 10)
                        .tickFormat('');
                    linesvg.append('g').attr('class', 'gridlines')
                        .attr('transform', `translate(${margins.left - 10},${margins.top})`)
                        .call(leftGridlines)

                    let bottomGridlines = d3.axisBottom(yearScale)
                        .tickSize(-lineHeight - 10)
                        .tickFormat('')
                        .ticks(8);
                    linesvg.append('g').attr('class', 'gridlines')
                        .attr('transform', `translate(${margins.left},${lineHeight + margins.top + 10})`)
                        .call(bottomGridlines);

                    const line25 = d3.line()
                        .x(d => yearScale(d['year']))
                        .y(d => marriageScale(1 - d['all_2534']))
                        .curve(d3.curveMonotoneX); // This makes the line smoother

                    linesvg.append("path")
                        .datum(data)
                        .attr("class", "line")
                        .attr("d", line25)
                        .attr('transform', `translate(${margins.left},${margins.top})`);

                    const line35 = d3.line()
                        .x(d => yearScale(d['year']))
                        .y(d => marriageScale(1 - d['all_3544']))
                        .curve(d3.curveMonotoneX);

                    linesvg.append("path")
                        .datum(data)
                        .attr("class", "line")
                        .attr("d", line35)
                        .attr('transform', `translate(${margins.left},${margins.top})`);

                    let mouseGroup = linesvg.append("g");

                    let xMarker = mouseGroup.append("line")
                        .attr("id", "xMarker")
                        .attr("fill", "none")
                        .attr("stroke", "black")
                        .attr("stroke-width", 1)
                        .attr("y1", 10)
                        .attr("y2", lineHeight + margins.top)
                        .attr("visibility", "hidden");

                    let yearMarker = mouseGroup.append("text")
                        .attr("id", "yearMarker")
                        .attr("fill", "black")
                        .attr("stroke", "none")
                        .attr("stroke-width", 1)
                        .attr("style", "font-family: sans-serif;")
                        .attr("y", 5)
                        .attr("visibility", "hidden");

                    let activeRegion = mouseGroup.append("rect")
                        .attr("id", "activeRegion")
                        .attr("width", lineWidth)
                        .attr("height", lineHeight)
                        .attr("fill", "none")
                        .attr("pointer-events", "all");

                    activeRegion.on("mouseover", function () {
                        xMarker.attr("visibility", "visible");
                        yearMarker.attr("visibility", "visible");
                    });

                    activeRegion.on("mouseout", function () {
                        xMarker.attr("visibility", "hidden");
                        yearMarker.attr("visibility", "hidden");
                    });

                    mouseGroup.attr('transform', `translate(${margins.left},${10})`);
                    let findYear = d3.bisector(d => d).center;

                    let years = []
                    data.forEach((row) => {
                        const year = row.year;
                        years.push(year);
                    })
                    console.log(years)

                    activeRegion.on("mousemove", function (evt) {
                        let location = d3.pointer(evt);
                        let x = location[0];
                        let xDate = yearScale.invert(x);

                        let index = findYear(years, xDate);
                        let highlightedYear = years[index];

                        // console.log(highlightedYear)
                        yearMarker.text(highlightedYear).attr("x", yearScale(highlightedYear)).attr("text-anchor", "middle");
                        let xPos = yearScale(highlightedYear);
                        xMarker.attr("x1", xPos).attr("x2", xPos);

                    });


                    linesvg.selectAll("circle.all2534").data(data)
                        .join("circle")
                        .attr("cx", d => yearScale(d['year']) + margins.left)
                        .attr("cy", d => marriageScale(1 - d['all_2534']) + margins.top)
                        .attr("r", 5)
                        .attr("fill", "blue")
                        .on("mouseover", mouseOn)
                        .on("mouseout", mouseOut);

                    linesvg.selectAll("circle.all3544").data(data)
                        .join("circle")
                        .attr("cx", d => yearScale(d['year']) + margins.left)
                        .attr("cy", d => marriageScale(1 - d['all_3544']) + margins.top)
                        .attr("r", 5)
                        .attr("fill", "blue")
                        .on("mouseover", mouseOn)
                        .on("mouseout", mouseOut);

                    let leftAxis = d3.axisLeft(marriageScale)
                        .tickFormat(d3.format('.0%'))
                        .ticks(8);
                    linesvg.append('g')
                        .attr('class', 'y axis')
                        .attr('transform', `translate(${margins.left - 10},${margins.top})`)
                        .call(leftAxis);

                    let bottomAxis = d3.axisBottom(yearScale)
                        .tickFormat(d3.format('d'))
                    linesvg.append('g')
                        .attr('class', 'y axis')
                        .attr('transform', `translate(${margins.left},${lineHeight + margins.top + 10})`)
                        .call(bottomAxis);

                    function mouseOn(event, d) {
                        d3.select(this)
                            .attr("stroke", "black")
                            .attr("stroke-width", 2);
                        xMarker.attr("visibility", "visible");
                        yearMarker.attr("visibility", "visible");

                    }

                    function mouseOut(event, d) {
                        d3.select(this)
                            .attr("stroke", "none")
                    }

                })
        }

        requestData();
    </script>
</body>

</html>
<html>

<head>
    <!---Imports d3--->
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        body {
        font-family: 'Arial', sans-serif;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 20px;
        padding: 20px;
        background-color: #fff0f5; /* Light pink background */
    }
        .container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            grid-template-rows: auto auto;
            gap: 20px;
            justify-content: center;
            align-items: start;
            width: 90%;
            max-width: 1024px;
            margin: 0 auto;
        }

        #checkboxForm {
            grid-column: 1 / 2;
            grid-row: 2 / 3;
        }

        #legend {
            grid-column: 2 / 3;
            grid-row: 2 / 3;
        }

        svg {
            background-color: #fff;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        form {
            margin-top: 20px;
        }

        input[type="checkbox"] {
            margin-right: 10px;
        }

        label {
            display: block;
            margin: 5px;
            cursor: pointer;
        }

        #checkboxForm {
        border: 1px solid #ffccd5; /* Lighter pink border for the form */
        padding: 10px;
        border-radius: 5px;
        background-color: #ffe4e9; /* Very light pink background for the form */
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

        .legend {
            font-size: 0.9em;
        }

        .legend rect {
            stroke: #fff;
            stroke-width: 2px;
        }

        .legend, .axis text {
        font-size: 0.9em;
        color: #7e072f; /* Pinkish text color */
    }

    .axis path, .axis line {
        fill: none;
        stroke: #d26a8d; /* Pinkish lines for the axis */
        shape-rendering: crispEdges;
    }

        .line {
            stroke: steelblue;
            stroke-width: 2px;
        }

        .dot {
            fill: steelblue;
        }

        .gridlines line {
        stroke: #eee; /* Lighter gridlines for softer appearance */
    }

        .gridlines .domain {
            stroke: none;
        }

        .line {
            fill: none;
            stroke-width: 2;
        }

        .dot {
            stroke-width: 2;
        }
        .title {
        font-size: 1.5em;
        font-weight: bold;
        color: #d26a8d;
        margin: 20px 0;
    }
    </style>
</head>

<body>
    <div class="title">Marriage Trends Visualization</div>
    <div class="container">
        <svg id="linesvg" height="500" width="800" style="border:1px solid rgb(0, 0, 0)"></svg>
        <svg id="bargraph" height="500" width="800" style="border:1px solid rgb(0, 0, 0);"></svg>
        <form id="checkboxForm">
            <label for="HS">
                <input type="checkbox" id="HS" value="HS">
                High school graduates or less
            </label><br>
            <label for="SC">
                <input type="checkbox" id="SC" value="SC">
                Some college
            </label><br>
            <label for="BAp">
                <input type="checkbox" id="BAp" value="BAp">
                Bachelor's degree or more
            </label><br>
            <label for="White">
                <input type="checkbox" id="White" value="White">
                Non-Hispanic white
            </label><br>
            <label for="Black">
                <input type="checkbox" id="Black" value="Black">
                Black or African American
            </label><br>
            <label for="Hisp">
                <input type="checkbox" id="Hisp" value="Hisp">
                Hispanic
            </label><br>
        </form>
        <svg id="legend" width="800" height="100" style="border:1px solid rgb(0, 0, 0);"></svg>
    </div>




    <script>
        const linesvg = d3.select("svg#linesvg");
        const width = linesvg.attr("width");
        const height = linesvg.attr("height");
        const margins = { top: 20, right: 20, bottom: 50, left: 50 };
        const lineWidth = width - margins.left - margins.right;
        const lineHeight = height - margins.top - margins.bottom;
        let selectedYears = []; //tracks up to two selected years

        const requestData = async function () {

            d3.csv('./both_sexes.csv', d3.autoType)
                .then((data) => {
                    const yearExtent = d3.extent(data, d => d['year']);
                    const yearScale = d3.scaleLinear().domain(yearExtent).range([0, lineWidth])

                    const marriageExtent = d3.extent(data, d => (1 - d['all_2534']));
                    const marriageScale = d3.scaleLinear().domain([marriageExtent[0] - 0.2, marriageExtent[1] + 0.1]).range([lineHeight, 0])

                    // Draw gridlines first
                    let leftGridlines = d3.axisLeft(marriageScale)
                        .tickSize(-lineWidth - 10)
                        .tickFormat('');
                    linesvg.append('g').attr('class', 'gridlines')
                        .attr('transform', `translate(${margins.left - 10},${margins.top})`)
                        .call(leftGridlines)

                    let bottomGridlines = d3.axisBottom(yearScale)
                        .tickSize(-lineHeight - 10)
                        .tickFormat('')
                        .ticks(8);
                    linesvg.append('g').attr('class', 'gridlines')
                        .attr('transform', `translate(${margins.left},${lineHeight + margins.top + 10})`)
                        .call(bottomGridlines);

                    const line25 = d3.line()
                        .x(d => yearScale(d['year']))
                        .y(d => marriageScale(1 - d['all_2534']))
                        .curve(d3.curveMonotoneX); // This makes the line smoother

                    linesvg.append("path")
                        .datum(data)
                        .attr("class", "line")
                        .attr("d", line25)
                        .attr("stroke", "blue")
                        .attr('transform', `translate(${margins.left},${margins.top})`);

                    const line35 = d3.line()
                        .x(d => yearScale(d['year']))
                        .y(d => marriageScale(1 - d['all_3544']))
                        .curve(d3.curveMonotoneX);

                    linesvg.append("path")
                        .datum(data)
                        .attr("class", "line")
                        .attr("stroke", "blue")
                        .attr("d", line35)
                        .attr('transform', `translate(${margins.left},${margins.top})`);

                    let mouseGroup = linesvg.append("g");

                    let xMarker = mouseGroup.append("line")
                        .attr("id", "xMarker")
                        .attr("fill", "none")
                        .attr("stroke", "black")
                        .attr("stroke-width", 1)
                        .attr("y1", 10)
                        .attr("y2", lineHeight + margins.top)
                        .attr("visibility", "hidden");

                    let yearMarker = mouseGroup.append("text")
                        .attr("id", "yearMarker")
                        .attr("fill", "black")
                        .attr("stroke", "none")
                        .attr("stroke-width", 1)
                        .attr("style", "font-family: sans-serif;")
                        .attr("y", 5)
                        .attr("visibility", "hidden");

                    let all2534Marker = mouseGroup.append("circle")
                        .attr("id", "all2534Marker")
                        .attr("fill", "none")
                        .attr("stroke", "black")
                        .attr("stroke-width", 2)
                        .attr("r", 7)
                        .attr("visibility", "hidden");

                    let all3544Marker = mouseGroup.append("circle")
                        .attr("id", "all3544Marker")
                        .attr("fill", "none")
                        .attr("stroke", "black")
                        .attr("stroke-width", 2)
                        .attr("r", 7)
                        .attr("visibility", "hidden");

                    function markerFunctor(id) {
                        return mouseGroup.append("circle")
                            .attr("id", id)
                            .attr("fill", "none")
                            .attr("stroke", "black")
                            .attr("stroke-width", 2)
                            .attr("r", 7)
                            .attr("visibility", "hidden"); // need to set to hidden later
                    }

                    let HS_2534Marker = markerFunctor('HS_2534Marker')
                    let HS_3544Marker = markerFunctor('HS_3544Marker')

                    let SC_2534Marker = markerFunctor('SC_2534Marker')
                    let SC_3544Marker = markerFunctor('SC_3544Marker')

                    let BAp_2534Marker = markerFunctor('BAp_2534Marker')
                    let BAp_3544Marker = markerFunctor('BAp_3544Marker')

                    let White_2534Marker = markerFunctor('White_2534Marker')
                    let White_3544Marker = markerFunctor('White_3544Marker')

                    let Black_2534Marker = markerFunctor('Black_2534Marker')
                    let Black_3544Marker = markerFunctor('Black_3544Marker')

                    let Hisp_2534Marker = markerFunctor('Hisp_2534Marker')
                    let Hisp_3544Marker = markerFunctor('Hisp_3544Marker')

                    let activeRegion = mouseGroup.append("rect")
                        .attr("id", "activeRegion")
                        .attr("width", lineWidth)
                        .attr("height", lineHeight)
                        .attr("fill", "none")
                        .attr("pointer-events", "all");

                    activeRegion.on("mouseover", function () {
                        xMarker.attr("visibility", "visible");
                        yearMarker.attr("visibility", "visible");
                        all2534Marker.attr("visibility", "visible");
                        all3544Marker.attr("visibility", "visible");

                        let checked = getCheckedCheckboxes()
                        //want marker to become visible

                        for (i = 0; i < checked.length; i++) {
                            let value2534Marker = d3.select("#" + checked[i] + '_2534Marker');
                            let value3544Marker = d3.select("#" + checked[i] + '_3544Marker');
                            value2534Marker.attr("visibility", "visible");
                            value3544Marker.attr("visibility", "visible");
                        }
                    });

                    activeRegion.on("mouseout", function () {
                        xMarker.attr("visibility", "hidden");
                        yearMarker.attr("visibility", "hidden");
                        all2534Marker.attr("visibility", "hidden");
                        all3544Marker.attr("visibility", "hidden");

                        let checked = getCheckedCheckboxes()
                        //want marker to become visible

                        for (i = 0; i < checked.length; i++) {
                            let value2534Marker = d3.select("#" + checked[i] + '_2534Marker');
                            let value3544Marker = d3.select("#" + checked[i] + '_3544Marker');
                            value2534Marker.attr("visibility", "hidden");
                            value3544Marker.attr("visibility", "hidden");
                        }

                    });

                    mouseGroup.attr('transform', `translate(${margins.left},${10})`);
                    let findYear = d3.bisector(d => d).center;

                    let years = []
                    data.forEach((row) => {
                        const year = row.year;
                        years.push(year);
                    })
                    // console.log(years)

                    function getCheckedCheckboxes() {
                        const checkedCheckboxes = [];
                        document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
                            if (checkbox.checked) {
                                checkedCheckboxes.push(checkbox.value);
                            }
                        });
                        return checkedCheckboxes;
                    }

                    activeRegion.on("mousemove", function (event) {
                        let location = d3.pointer(event);
                        let x = location[0];
                        let xDate = yearScale.invert(x);

                        let index = findYear(years, xDate);
                        let highlightedYear = years[index];
                        let datarow = []
                        data.forEach((row) => {
                            if (row['year'] === highlightedYear) {
                                datarow.push(row);
                            }
                        });

                        yearMarker.text(highlightedYear)
                            .attr("x", yearScale(highlightedYear))
                            .attr("text-anchor", "middle");
                        let xPos = yearScale(highlightedYear);
                        xMarker.attr("x1", xPos).attr("x2", xPos);

                        // console.log(datarow[0]['all_2534'])
                        let yPos = marriageScale(1 - datarow[0]['all_2534']);
                        let yPos2 = marriageScale(1 - datarow[0]['all_3544']);

                        all2534Marker.attr("cx", xPos).attr("cy", yPos + 10);
                        all3544Marker.attr("cx", xPos).attr("cy", yPos2 + 10);

                        // make loop for setting up the rest of the markers
                        const checkedList = getCheckedCheckboxes();
                        checkedList.forEach(value => {
                            const markername2534 = value + '_2534Marker';
                            const markername3544 = value + '_3544Marker';
                            d3.select("#" + markername2534)
                                .attr("cx", xPos)
                                .attr("cy", marriageScale(1 - datarow[0][value + '_2534']) + 10);
                            d3.select("#" + markername3544)
                                .attr("cx", xPos)
                                .attr("cy", marriageScale(1 - datarow[0][value + '_3544']) + 10);
                        });

                    });

                    let clickedMarker1 = linesvg.append("line").attr("visibility", "hidden");
                    let clickedMarker2 = linesvg.append("line").attr("visibility", "hidden");

                    activeRegion.on("click", function(event) {
                        let location = d3.pointer(event);
                        let x = location[0];
                        let xDate = yearScale.invert(x);
                        let index = findYear(years, xDate);
                        let highlightedYear = years[index];

                        // Add or remove the year from the selection
                        const yearIndex = selectedYears.indexOf(highlightedYear);
                        if (yearIndex > -1) {
                            selectedYears.splice(yearIndex, 1); // Deselect if already selected
                        } else {
                            if (selectedYears.length < 2) {
                                selectedYears.push(highlightedYear); // Add new selection
                            } else {
                                selectedYears.shift(); // Remove the oldest selection if two are already selected
                                selectedYears.push(highlightedYear);
                            }
                        }

                        // Update markers based on the new state of selectedYears
                        updateMarkers(selectedYears);


                        if(data && selectedYears.length > 0) {
                            updateBarGraph(selectedYears, data); //dynamic update
                        } else {
                            //clear the bar graph if no years are selected
                            d3.select("#bargraph").selectAll("*").remove();
                        }
                    });


                    function updateMarkers(selectedYears) {
                        // Hide both markers initially
                        clickedMarker1.attr("visibility", "hidden");
                        clickedMarker2.attr("visibility", "hidden");

                        // Update marker positions based on selectedYears
                        selectedYears.forEach((year, index) => {
                            let marker = (index === 0) ? clickedMarker1 : clickedMarker2;
                            marker.attr("visibility", "visible")
                                .attr("x1", yearScale(year) + margins.left)
                                .attr("x2", yearScale(year) + margins.left)
                                .attr("y1", margins.top)
                                .attr("y2", height - margins.bottom + 10)
                                .attr("stroke", "black")
                                .attr("stroke-width", 2);
                        });
                    }

                    linesvg.selectAll("circle.all_2534").data(data)
                        .join("circle")
                        .attr("cx", d => yearScale(d['year']) + margins.left)
                        .attr("cy", d => marriageScale(1 - d['all_2534']) + margins.top)
                        .attr("r", 5)
                        .attr("fill", "blue")
                        .on("mouseover", mouseOn)
                        .on("mouseout", mouseOut)
                        .on("click", function (event, d) {
                            updateMarkers(selectedYears);
                        });

                    linesvg.selectAll("circle.all_3544").data(data)
                        .join("circle")
                        .attr("cx", d => yearScale(d['year']) + margins.left)
                        .attr("cy", d => marriageScale(1 - d['all_3544']) + margins.top)
                        .attr("r", 5)
                        .attr("fill", "blue")
                        .on("mouseover", mouseOn)
                        .on("mouseout", mouseOut)
                        .on("click", function (event, d) {
                            updateMarkers(selectedYears);
                        });

                    function lineFunctor(dataName, data, color, line) {
                        linesvg.selectAll("circle." + dataName).data(data)
                            .join("circle")
                            .attr("class", "circle" + dataName)
                            .attr("cx", d => yearScale(d['year']) + margins.left)
                            .attr("cy", d => marriageScale(1 - d[dataName]) + margins.top)
                            .attr("r", 5)
                            .attr("fill", color)
                            .attr("visibility", "hidden")
                            .on("mouseover", mouseOn)
                            .on("mouseout", mouseOut)
                            .on("click", function (event, d) {
                                updateMarkers(selectedYears);
                            });

                        linesvg.append("path")
                            .datum(data)
                            .attr("class", "line" + dataName)
                            .attr("d", line)
                            .attr("fill", "none")
                            .attr("stroke", color)
                            .attr("stroke-width", 2)
                            .attr('transform', `translate(${margins.left},${margins.top})`)
                            .attr("visibility", "hidden");
                    }

                    const lineHS_2534 = d3.line()
                        .x(d => yearScale(d['year']))
                        .y(d => marriageScale(1 - d['HS_2534']))
                        .curve(d3.curveMonotoneX);
                    lineFunctor('HS_2534', data, 'green', lineHS_2534);

                    const lineHS_3544 = d3.line()
                        .x(d => yearScale(d['year']))
                        .y(d => marriageScale(1 - d['HS_3544']))
                        .curve(d3.curveMonotoneX);
                    lineFunctor('HS_3544', data, 'green', lineHS_3544);

                    const lineSC_2534 = d3.line()
                        .x(d => yearScale(d['year']))
                        .y(d => marriageScale(1 - d['SC_2534']))
                        .curve(d3.curveMonotoneX);
                    lineFunctor('SC_2534', data, 'orange', lineSC_2534);

                    const lineSC_3544 = d3.line()
                        .x(d => yearScale(d['year']))
                        .y(d => marriageScale(1 - d['SC_3544']))
                        .curve(d3.curveMonotoneX);
                    lineFunctor('SC_3544', data, 'orange', lineSC_3544);

                    const lineBAp_2534 = d3.line()
                        .x(d => yearScale(d['year']))
                        .y(d => marriageScale(1 - d['BAp_2534']))
                        .curve(d3.curveMonotoneX);
                    lineFunctor('BAp_2534', data, 'purple', lineBAp_2534);

                    const lineBAp_3544 = d3.line()
                        .x(d => yearScale(d['year']))
                        .y(d => marriageScale(1 - d['BAp_3544']))
                        .curve(d3.curveMonotoneX);
                    lineFunctor('BAp_3544', data, 'purple', lineBAp_3544);

                    const lineWhite_2534 = d3.line()
                        .x(d => yearScale(d['year']))
                        .y(d => marriageScale(1 - d['White_2534']))
                        .curve(d3.curveMonotoneX);
                    lineFunctor('White_2534', data, 'pink', lineWhite_2534);

                    const lineWhite_3544 = d3.line()
                        .x(d => yearScale(d['year']))
                        .y(d => marriageScale(1 - d['White_3544']))
                        .curve(d3.curveMonotoneX);
                    lineFunctor('White_3544', data, 'pink', lineWhite_3544);

                    const lineBlack_2534 = d3.line()
                        .x(d => yearScale(d['year']))
                        .y(d => marriageScale(1 - d['Black_2534']))
                        .curve(d3.curveMonotoneX);
                    lineFunctor('Black_2534', data, 'brown', lineBlack_2534);

                    const lineBlack_3544 = d3.line()
                        .x(d => yearScale(d['year']))
                        .y(d => marriageScale(1 - d['Black_3544']))
                        .curve(d3.curveMonotoneX);
                    lineFunctor('Black_3544', data, 'brown', lineBlack_3544);

                    const lineHisp_2534 = d3.line()
                        .x(d => yearScale(d['year']))
                        .y(d => marriageScale(1 - d['Hisp_2534']))
                        .curve(d3.curveMonotoneX);
                    lineFunctor('Hisp_2534', data, 'orange', lineHisp_2534);

                    const lineHisp_3544 = d3.line()
                        .x(d => yearScale(d['year']))
                        .y(d => marriageScale(1 - d['Hisp_3544']))
                        .curve(d3.curveMonotoneX);
                    lineFunctor('Hisp_3544', data, 'orange', lineHisp_3544);


                    function becomeVisible(value) {
                        const value2534 = value + '_2534';
                        const value3544 = value + '_3544';

                        linesvg.selectAll(".circle" + value2534).attr("visibility", "visible");
                        linesvg.selectAll("path.line" + value2534).attr("visibility", "visible");

                        linesvg.selectAll(".circle" + value3544).attr("visibility", "visible");
                        linesvg.selectAll("path.line" + value3544).attr("visibility", "visible");
                    }

                    function becomeInvisible(value) {
                        const value2534 = value + '_2534';
                        const value3544 = value + '_3544';

                        linesvg.selectAll(".circle" + value2534).attr("visibility", "hidden");
                        linesvg.selectAll("path.line" + value2534).attr("visibility", "hidden");

                        linesvg.selectAll(".circle" + value3544).attr("visibility", "hidden");
                        linesvg.selectAll("path.line" + value3544).attr("visibility", "hidden");

                        //want marker to become invisible
                        let value2534Marker = d3.select("#" + value + '_2534Marker');
                        let value3544Marker = d3.select("#" + value + '_3544Marker');
                        value2534Marker.attr("visibility", "hidden");
                        value3544Marker.attr("visibility", "hidden");
                    }

                    function updateBarGraph(selectedYears, data) {
                            const benchmarkCategories = ["all_2534", "all_3544"];
                            const svg = d3.select("#bargraph");
                            const margin = { top: 20, right: 20, bottom: 30, left: 40 };
                            const width = +svg.attr("width") - margin.left - margin.right;
                            const height = +svg.attr("height") - margin.top - margin.bottom ;


                            svg.selectAll("*").remove();

                            const checkedCategories = getCheckedCheckboxes(); 

                            const filteredData = data.filter(d => selectedYears.includes(d.year));
                            let barChartData = [];

                            filteredData.forEach(row => {
                                benchmarkCategories.forEach(category => {
                                    barChartData.push({ category, value: 1 - row[category], year: row.year });
                                });
                            });

                            filteredData.forEach(row => {
                                checkedCategories.forEach(key => {
                                    if (key !== "all") { 
                                        const category = key + "_2534"; 
                                        const category2 = key + "_3544"; 
                                        barChartData.push({ category, value: 1 - row[category], year: row.year });
                                        barChartData.push({ category: category2, value: 1 - row[category2], year: row.year });
                                    }
                                });
                            });

                            // Color scale
                            const colorScale = d3.scaleOrdinal()
                                .domain(benchmarkCategories.concat(checkedCategories.flatMap(key => [`${key}_2534`, `${key}_3544`])))
                                .range(["#6b486b", "#a05d56", ...d3.schemeTableau10]);

                            const x = d3.scaleBand().rangeRound([0, width]).padding(0.1);
                            const y = d3.scaleLinear().rangeRound([height, 0]);

                            x.domain(barChartData.map(d => `${d.year}_${d.category}`));
                            y.domain([0, d3.max(barChartData, d => d.value)]).nice();

                            svg.selectAll(".bar")
                                .data(barChartData)
                                .enter().append("rect")
                                .attr("class", "bar")
                                .attr("x", d => x(`${d.year}_${d.category}`))
                                .attr("y", d => y(d.value) + 30)
                                .attr("width", x.bandwidth())
                                .attr("height", d => height - y(d.value) - 30)
                                .attr("fill", d => colorScale(d.category));

                            svg.selectAll(".label")
                                .data(barChartData)
                                .enter().append("text")
                                .attr("class", "label")
                                .attr("x", d => x(`${d.year}_${d.category}`) + x.bandwidth() / 2)
                                .attr("y", d => y(d.value) + 25)
                                .attr("text-anchor", "middle")
                                .text(d => d3.format(".1%")(d.value));

                            svg.append("g")
                                .attr("transform", `translate(0,${height})`)
                                .call(d3.axisBottom(x).tickFormat(d => {
                                    let [year, category] = d.split("_");
                                    return `${year} (${category})`;
                                }).ticks(barChartData.length));

                            svg.append("g")
                                .call(d3.axisLeft(y).ticks(null, "%"));

                            const legendSvg = d3.select("#legend");
                            legendSvg.selectAll("*").remove(); // Clear previous legends

                            const legendData = [...new Set(barChartData.map(d => d.category))];
                            
                            // Assuming each legend item needs 20px of height:
                            legendSvg.attr("height", legendData.length * 20 + 10); // Adjust height based on items

                            const legend = legendSvg.selectAll(".legend")
                                .data(legendData)
                                .enter().append("g")
                                .attr("class", "legend")
                                .attr("transform", (d, i) => `translate(10,${i * 20})`); // Adjust translation as needed

                            legend.append("rect")
                                .attr("x", 0)
                                .attr("width", 18)
                                .attr("height", 18)
                                .attr("fill", d => colorScale(d)); // Ensure colorScale is accessible here

                            legend.append("text")
                                .attr("x", 24) // Position text to the right of the rectangles
                                .attr("y", 9)
                                .attr("dy", ".35em")
                                .text(d => `${d.split('_').slice(0, -1).join(' ')} (${d.split('_').pop() === '2534' ? '25-34' : '35-44'})`);
                    }



                    document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
                        checkbox.addEventListener('change', function () {
                            if (this.checked) {
                                // console.log(this.value)
                                becomeVisible(this.value)
                            } else {
                                // console.log(`Checkbox ${this.value} is unchecked`)
                                becomeInvisible(this.value)
                            }
                        });
                    });

                    let leftAxis = d3.axisLeft(marriageScale)
                        .tickFormat(d3.format('.0%'))
                        .ticks(8);
                    linesvg.append('g')
                        .attr('class', 'y axis')
                        .attr('transform', `translate(${margins.left - 10},${margins.top})`)
                        .call(leftAxis);

                    let bottomAxis = d3.axisBottom(yearScale)
                        .tickFormat(d3.format('d'))
                    linesvg.append('g')
                        .attr('class', 'y axis')
                        .attr('transform', `translate(${margins.left},${lineHeight + margins.top + 10})`)
                        .call(bottomAxis);

                    function mouseOn(event, d) {
                        d3.select(this)
                            .attr("stroke", "black")
                            .attr("stroke-width", 2);
                        xMarker.attr("visibility", "visible");
                        yearMarker.attr("visibility", "visible");

                        all2534Marker.attr("visibility", "visible");
                        all3544Marker.attr("visibility", "visible");

                        let checked = getCheckedCheckboxes()
                        //want marker to become visible

                        for (i = 0; i < checked.length; i++) {
                            let value2534Marker = d3.select("#" + checked[i] + '_2534Marker');
                            let value3544Marker = d3.select("#" + checked[i] + '_3544Marker');
                            value2534Marker.attr("visibility", "visible");
                            value3544Marker.attr("visibility", "visible");
                        }

                    }

                    function mouseOut(event, d) {
                        d3.select(this)
                            .attr("stroke", "none")
                    }

                })
        }

        requestData();
    </script>
</body>
</html>